// This source code comes from www.jamesmolloy.co.uk

#include "page.h"

page_dir_t* kernel_directory=0;
page_dir_t* current_directory=0;
u32int_t* frames;
u32int_t nframes;

u32int_t plac_addr;

u32int_t kmalloc_int(u32int_t sz, u32int_t align, u32int_t *phys) {
    if (align == 1 && (plac_addr & 0xFFFFF000)) {
        plac_addr &= 0xFFFFF000;
        plac_addr += 0x1000;
    }
    if (phys)
        *phys = plac_addr;
    u32int_t tmp = plac_addr;
    plac_addr += sz;
    return tmp;
}

u32int_t kmalloc_a(u32int_t sz) {
    return kmalloc_int(sz, 1, 0);
}

u32int_t kmalloc_p(u32int_t sz, u32int_t *phys) {
    return kmalloc_int(sz, 0, phys);
}

u32int_t kmalloc_ap(u32int_t sz, u32int_t *phys) {
    return kmalloc_int(sz, 1, phys);
}

u32int_t kmalloc(u32int_t sz) {
    return kmalloc_int(sz, 0, 0);
}

void init_paging() {
	u32int_t i=0;
	u32int_t mem_end_page = 0x1000000;
	nframes = mem_end_page / 0x1000;
	frames = (u32int_t*)kmalloc(IFB(nframes));
	memset(frames, 0, IFB(nframes));
	
	kernel_directory = (page_dir_t*)kmalloc_a(sizeof(page_dir_t));
	memset(kernel_directory, 0, sizeof(page_dir_t));
	current_directory = kernel_directory;
	
	while (i<plac_addr) {
		alloc_frame(get_page(i,1,kernel_directory),0,0);
		i+=0x1000;
	}
	reg_int_handler(14,page_fault);
	switch_page_dir(kernel_directory);
}

static void set_frame (u32int_t addr) {
	u32int_t frame = addr/0x1000;
	u32int_t idx = IFB(frame);
	u32int_t off = OFB(frame);
	frames[idx] |= (1<<off);
}

static void clear_frame (u32int_t addr) {
	u32int_t frame = addr/0x1000;
	u32int_t idx = IFB(frame);
	u32int_t off = OFB(frame);
	frames[idx] &= ~(1<<off);
}

static u32int_t test_frame (u32int_t addr) {
	u32int_t frame = addr/0x1000;
	u32int_t idx = IFB(frame);
	u32int_t off = OFB(frame);
	return (frames[idx] & (1<<off));
}

static u32int_t first_frame() {
	u32int_t i, j;
	for(i=0;i<IFB(nframes);i++)
		if(frames[i]!=0xFFFFFFFF)
			for(j=0;j<32;j++) {
				u32int_t test = 1<<j;
				if(!(frames[i]&test))
					return i*32+j;
			}
}

void alloc_frame (page_t* page, u32int_t krnl, u32int_t writeable) {
	if(page->frame != 0)
		return;
	u32int_t idx = first_frame();
	if(idx==(u32int_t)-1)
		panic("Brak wolnych ramek");
	set_frame(idx*0x1000);
	page->present = 1;
	page->rw      = writeable?1:0;
	page->user    = krnl?0:1;
	page->frame   = idx;
}

void free_frame(page_t* page) {
	u32int_t frame;
	if(!(frame=page->frame))
		return;
	clear_frame(frame);
	page->frame=0;
}

void switch_page_dir (page_dir_t* dir) {
	u32int_t cr0;
	current_directory = dir;
	__asm__ __volatile__ ("mov %0, %%cr3"::"r"(&dir->tablesPhys));
	__asm__ __volatile__ ("mov %%cr0, %0":"=r"(cr0));
	cr0 |= 0x80000000;
	__asm__ __volatile__ ("mov %0, %%cr0"::"r"(cr0));
}

page_t* get_page (u32int_t address, u32int_t make, page_dir_t* dir) {
	address /= 0x1000;
	u32int_t table_idx = address / 1024;
	if(dir->tables[table_idx])
		return &dir->tables[table_idx]->pages[address%1024];
	else if (make) {
		u32int_t tmp;
		dir->tables[table_idx] = (page_table_t*)kmalloc_ap(sizeof(page_table_t), &tmp);
		memset(dir->tables[table_idx],0,0x1000);
		dir->tablesPhys[table_idx] = tmp|0x7;
		return &dir->tables[table_idx]->pages[address%1024];
	}
	return 0;
}

void page_fault (regs_t regs) {
	panic("paging");
}

